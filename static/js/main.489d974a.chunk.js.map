{"version":3,"sources":["components/Letter.jsx","components/TypeInput.jsx","App.js","components/DemoInput.jsx","Demo.js","serviceWorker.js","index.js"],"names":["Letter","state","getChar","lett","char","react_default","a","createElement","Fragment","className","this","getLetterClasses","props","letter","cls","status","pos","isCurrent","Component","TypeInput","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","sendPacket","time","request","websocket","send","JSON","stringify","addText","text","lines","split","buffer","concat","ready","mainline","shift","mainlineToLetters","i","numBottomlines","numToplines","bottomlines","push","setUnderline","forceUpdate","mainlineLetters","length","charAt","incrementPointer","charNum","saveLastCords","lastSentCharNum","lastSentLineNum","lineNum","decrementPointer","setStatus","int","handleKeyDown","e","key","goodPointer","toplines","Date","now","reFocus","textInput","focus","renderLines","elements","content","map","renderMainline","letters","components_Letter","WebSocket","onmessage","event","data","onopen","bool","_this2","type","ref","input","style","opacity","onKeyDown","onBlur","value","App","components_TypeInput","DemoInput","Demo","components_DemoInput","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","BrowserRouter","Link","to","Route","exact","path","component","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.489d974a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Letter extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <span className={this.getLetterClasses(this.props.letter)}>\r\n        {this.getChar(this.props.letter)}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  getChar = lett => {\r\n    if (lett.char === \"\\t\") {\r\n      return <React.Fragment>&emsp;&emsp;</React.Fragment>;\r\n    } else if (lett.char === \"\\n\") {\r\n      return <React.Fragment>&nbsp;</React.Fragment>;\r\n    } else {\r\n      return <React.Fragment>{lett.char}</React.Fragment>;\r\n    }\r\n  };\r\n\r\n  getLetterClasses(letter) {\r\n    let cls = \"\";\r\n    switch (letter.status) {\r\n      case 0:\r\n        cls += \"not-typed \";\r\n        break;\r\n      case 1:\r\n        cls += \"good \";\r\n        break;\r\n      case 2:\r\n        cls += \"bad \";\r\n        break;\r\n      default:\r\n    }\r\n    cls += \" highlight \";\r\n\r\n    switch (letter.pos) {\r\n      case -1:\r\n        cls += \"left-round \";\r\n        break;\r\n      case 1:\r\n        cls += \"right-round \";\r\n        break;\r\n      default:\r\n    }\r\n    if (letter.isCurrent) {\r\n      cls += \"underline \";\r\n    }\r\n    return cls;\r\n  }\r\n}\r\n\r\nexport default Letter;\r\n","import React, { Component } from \"react\";\r\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\r\nimport Letter from \"./Letter\";\r\nimport { isAbsolute } from \"path\";\r\n\r\nclass TypeInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      buffer: [],\r\n      toplines: [],\r\n      bottomlines: [],\r\n      mainline: \"\",\r\n      mainlineLetters: [],\r\n      lineNum: 0,\r\n      charNum: 0,\r\n      lastSentLineNum: 0,\r\n      lastSentCharNum: 0,\r\n      goodPointer: 0,\r\n      numToplines: props.numToplines,\r\n      numBottomlines: props.numBottomlines,\r\n      websocket: new WebSocket(\"ws://127.0.0.1:5678/\"),\r\n      ready: false\r\n    };\r\n\r\n    this.state.websocket.onmessage = event => {\r\n      this.addText(event.data);\r\n    };\r\n\r\n    this.state.websocket.onopen = event => {\r\n        this.sendPacket(null, null, null);\r\n    };\r\n\r\n  }\r\n\r\n  sendPacket = (char, time, request) => {\r\n      this.state.websocket.send(\r\n        JSON.stringify({ char: char, time: time, request: request })\r\n      );\r\n  };\r\n\r\n  addText = text => {\r\n    let lines = text.split(\"\\n\");\r\n    this.state.buffer = this.state.buffer.concat(lines);\r\n\r\n    if (!this.state.ready) {\r\n        this.state.ready = true;\r\n        this.state.mainline = this.state.buffer.shift();\r\n        this.mainlineToLetters();\r\n        for (var i = 0; i < this.state.numBottomlines + this.state.numToplines; i++) {\r\n          this.state.bottomlines.push(this.state.buffer.shift());\r\n        }\r\n        this.setUnderline(true);\r\n        this.forceUpdate();\r\n    }\r\n  };\r\n\r\n  mainlineToLetters = () => {\r\n    this.state.mainlineLetters = [];\r\n    for (var i = 0; i < this.state.mainline.length; i++) {\r\n      var pos;\r\n      if (i === 0) pos = -1;\r\n      else if (i === this.state.mainline.length - 1) pos = 1;\r\n      else pos = 0;\r\n      this.state.mainlineLetters.push({\r\n        char: this.state.mainline.charAt(i),\r\n        status: 0,\r\n        isCurrent: false,\r\n        pos: pos\r\n      });\r\n    }\r\n    this.state.mainlineLetters.push({\r\n      char: <React.Fragment>&nbsp;</React.Fragment>,\r\n      status: 0,\r\n      isCurrent: false,\r\n      pos: 1\r\n    });\r\n  };\r\n\r\n  setUnderline(bool) {\r\n    this.state.mainlineLetters[this.state.charNum].isCurrent = bool;\r\n  }\r\n\r\n  incrementPointer = () => {\r\n    if (this.state.charNum < this.state.mainlineLetters.length) {\r\n      this.setUnderline(false);\r\n      this.state.charNum++;\r\n      if (this.state.charNum !== this.state.mainlineLetters.length) {\r\n        this.setUnderline(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  saveLastCords = () => {\r\n    this.state.lastSentCharNum = this.state.charNum;\r\n    this.state.lastSentLineNum = this.state.lineNum;\r\n  };\r\n\r\n  decrementPointer = () => {\r\n    if (this.state.charNum !== this.state.mainlineLetters.length) {\r\n      this.setUnderline(false);\r\n    }\r\n    if (this.state.charNum > 0) {\r\n      this.state.charNum--;\r\n    }\r\n    this.setUnderline(true);\r\n  };\r\n\r\n  setStatus = int => {\r\n    this.state.mainlineLetters[this.state.charNum].status = int;\r\n  };\r\n\r\n  handleKeyDown = e => {\r\n    let key = e.key;\r\n\r\n    if (\r\n      key === \"Backspace\" &&\r\n      ((this.state.charNum !== this.state.mainline.length ||\r\n        this.state.goodPointer !== this.state.mainline.length)\r\n        && this.state.mainline.charAt(this.state.charNum - 1) !== '\\t')\r\n    ) {\r\n      this.decrementPointer();\r\n      this.setStatus(0);\r\n    } else if (\r\n      key === \"Enter\" &&\r\n      this.state.charNum === this.state.mainline.length &&\r\n      this.state.goodPointer === this.state.mainline.length\r\n    ) {\r\n      this.state.charNum = 0;\r\n      this.state.goodPointer = 0;\r\n\r\n      this.state.toplines.push(this.state.mainline);\r\n      if (this.state.toplines.length > this.state.numToplines)\r\n        this.state.toplines.shift();\r\n\r\n      this.state.mainline = this.state.bottomlines.shift();\r\n      this.mainlineToLetters();\r\n      if (this.state.toplines.length === this.state.numToplines) {\r\n        this.state.bottomlines.push(this.state.buffer.shift());\r\n      }\r\n\r\n      if (this.state.mainline.length !== 0) {\r\n        this.setUnderline(true);\r\n      }\r\n\r\n      while (this.state.mainline.charAt(this.state.charNum) === '\\t') {\r\n        this.setStatus(1);\r\n        this.incrementPointer();\r\n        this.state.goodPointer++;\r\n      }\r\n      this.setUnderline(true);\r\n    } else if (\r\n      key === this.state.mainline.charAt(this.state.charNum) &&\r\n      this.state.charNum !== this.state.mainline.length\r\n    ) {\r\n      this.setStatus(1);\r\n      this.incrementPointer();\r\n      if (this.state.goodPointer === this.state.charNum - 1) {\r\n        this.state.goodPointer++;\r\n        this.sendPacket(key, Date.now(), this.state.buffer.length);\r\n      }\r\n    } else if (\r\n      key.length === 1 &&\r\n      this.state.charNum !== this.state.mainline.length\r\n    ) {\r\n      this.setStatus(2);\r\n      this.incrementPointer();\r\n    }\r\n    this.forceUpdate();\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.reFocus();\r\n  }\r\n\r\n  reFocus = () => {\r\n    this.textInput.focus();\r\n  };\r\n\r\n  renderLines = lines => {\r\n    var elements = [];\r\n    for (var i = 0; i < lines.length; i++) {\r\n      if (lines[i].length === 0) {\r\n        elements.push(<br />);\r\n      } else {\r\n        let content = lines[i].split('').map(char => {\r\n            if (char === \"\\t\") {\r\n                return <React.Fragment>&emsp;&emsp;</React.Fragment>;\r\n            } else {\r\n                return <React.Fragment>{char}</React.Fragment>\r\n            }\r\n        });\r\n        elements.push(<div>{content}</div>);\r\n      }\r\n    }\r\n    return elements;\r\n  };\r\n\r\n  renderMainline = letters => {\r\n    if (letters.length === 0) {\r\n      return (\r\n        <React.Fragment>\r\n          &nbsp;\r\n          <br />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n    var elements = [];\r\n    for (var i = 0; i < letters.length; i++) {\r\n      elements.push(<Letter letter={letters[i]} />);\r\n    }\r\n    return elements;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"TypeText\">\r\n        <input\r\n          type=\"textArea\"\r\n          ref={input => {\r\n            this.textInput = input;\r\n          }}\r\n          style={{ opacity: 0 }}\r\n          onKeyDown={this.handleKeyDown}\r\n          onBlur={this.reFocus}\r\n          value={\"\"}\r\n        />\r\n        <div className=\"top-lines good\" ref={input => {this.toplines = input}}>\r\n          {this.renderLines(this.state.toplines)}\r\n        </div>\r\n        <div className=\"main-line\" ref={input => {this.mainline = input}}>\r\n          {this.renderMainline(this.state.mainlineLetters)}\r\n        </div>\r\n        <div className=\"bottom-lines\" ref={input => {this.bottomlines = input}}>\r\n          {this.renderLines(this.state.bottomlines)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TypeInput;\r\n","import React, { Component } from \"react\";\r\n// import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport TypeInput from \"./components/TypeInput.jsx\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <TypeInput\r\n          numToplines={3}\r\n          numBottomlines={3}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  sendCorrect(char) {}\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\r\nimport { isAbsolute } from \"path\";\r\n\r\nclass DemoInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      websocket: new WebSocket(\"ws://127.0.0.1:5678/\"),\r\n    };\r\n\r\n  }\r\n\r\n  sendPacket = (char, time, request) => {\r\n      this.state.websocket.send(\r\n        JSON.stringify({ char: char, time: time, request: request })\r\n      );\r\n  };\r\n\r\n  handleKeyDown = e => {\r\n    let key = e.key;\r\n    if (key.length === 1) {\r\n        this.sendPacket(key, Date.now(), 1000000);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.reFocus();\r\n  }\r\n\r\n  reFocus = () => {\r\n    this.textInput.focus();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"TypeText\">\r\n        <input\r\n          type=\"textArea\"\r\n          ref={input => {\r\n            this.textInput = input;\r\n          }}\r\n          style={{ opacity: 0 }}\r\n          onKeyDown={this.handleKeyDown}\r\n          onBlur={this.reFocus}\r\n          value={\"\"}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DemoInput;\r\n","import React, { Component } from \"react\";\r\n// import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport DemoInput from \"./components/DemoInput.jsx\";\r\n\r\nclass Demo extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <DemoInput/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Demo;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {BrowserRouter, Route, Link} from 'react-router-dom';\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport Demo from \"./Demo\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<div><App/> <BrowserRouter>\r\n    <div>\r\n    <Link to=\"/demo\"></Link>\r\n    <Route exact path=\"/demo\" component={Demo}/>\r\n    </div>\r\n    </BrowserRouter></div>, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}